// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: leagues.queries.sql

package db

import (
	"context"
)

const getLeague = `-- name: GetLeague :one
SELECT id, uid, season_id, name, created_at, updated_at, deleted_at FROM leagues WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLeague(ctx context.Context, id int64) (League, error) {
	row := q.db.QueryRow(ctx, getLeague, id)
	var i League
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.SeasonID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listSeasonLeagues = `-- name: ListSeasonLeagues :many
SELECT id, uid, season_id, name, created_at, updated_at, deleted_at FROM leagues WHERE season_id = $1 ORDER BY name
`

func (q *Queries) ListSeasonLeagues(ctx context.Context, seasonID int64) ([]League, error) {
	rows, err := q.db.Query(ctx, listSeasonLeagues, seasonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []League
	for rows.Next() {
		var i League
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.SeasonID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertLeague = `-- name: UpsertLeague :one
INSERT INTO
    leagues (uid, season_id, name)
VALUES ($1, $2, $3) ON CONFLICT (uid)
DO
UPDATE
SET
    updated_at = NOW() RETURNING id, uid, season_id, name, created_at, updated_at, deleted_at
`

type UpsertLeagueParams struct {
	Uid      string
	SeasonID int64
	Name     string
}

func (q *Queries) UpsertLeague(ctx context.Context, arg UpsertLeagueParams) (League, error) {
	row := q.db.QueryRow(ctx, upsertLeague, arg.Uid, arg.SeasonID, arg.Name)
	var i League
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.SeasonID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
