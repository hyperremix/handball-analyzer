// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: seasons.queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getSeason = `-- name: GetSeason :one
SELECT id, uid, start_date, end_date, created_at, updated_at, deleted_at FROM seasons WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSeason(ctx context.Context, id int64) (Season, error) {
	row := q.db.QueryRow(ctx, getSeason, id)
	var i Season
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listSeasons = `-- name: ListSeasons :many
SELECT id, uid, start_date, end_date, created_at, updated_at, deleted_at FROM seasons ORDER BY start_date DESC
`

func (q *Queries) ListSeasons(ctx context.Context) ([]Season, error) {
	rows, err := q.db.Query(ctx, listSeasons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Season
	for rows.Next() {
		var i Season
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertSeason = `-- name: UpsertSeason :one
INSERT INTO
    seasons (uid, start_date, end_date)
VALUES ($1, $2, $3) ON CONFLICT (uid)
DO
UPDATE
SET
    updated_at = NOW() RETURNING id, uid, start_date, end_date, created_at, updated_at, deleted_at
`

type UpsertSeasonParams struct {
	Uid       string
	StartDate pgtype.Timestamptz
	EndDate   pgtype.Timestamptz
}

func (q *Queries) UpsertSeason(ctx context.Context, arg UpsertSeasonParams) (Season, error) {
	row := q.db.QueryRow(ctx, upsertSeason, arg.Uid, arg.StartDate, arg.EndDate)
	var i Season
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
