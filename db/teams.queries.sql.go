// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: teams.queries.sql

package db

import (
	"context"
)

const listLeagueTeams = `-- name: ListLeagueTeams :many
SELECT id, uid, league_id, name, created_at, updated_at, deleted_at FROM teams WHERE league_id = $1 ORDER BY name
`

func (q *Queries) ListLeagueTeams(ctx context.Context, leagueID int64) ([]Team, error) {
	rows, err := q.db.Query(ctx, listLeagueTeams, leagueID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.LeagueID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertTeam = `-- name: UpsertTeam :one
INSERT INTO
    teams (uid, name, league_id)
VALUES ($1, $2, $3) ON CONFLICT (uid)
DO
UPDATE
SET
    updated_at = NOW() RETURNING id, uid, league_id, name, created_at, updated_at, deleted_at
`

type UpsertTeamParams struct {
	Uid      string
	Name     string
	LeagueID int64
}

func (q *Queries) UpsertTeam(ctx context.Context, arg UpsertTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, upsertTeam, arg.Uid, arg.Name, arg.LeagueID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.LeagueID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
